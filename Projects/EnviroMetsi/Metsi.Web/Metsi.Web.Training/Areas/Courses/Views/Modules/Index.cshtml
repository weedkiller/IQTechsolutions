@inject IApplicationConfiguration Configuration

@model Education.Base.ApiModels.ModuleApiModel

@using Filing.Base.Enums
@using Filing.Base.Extensions
@using Iqt.Base.Extensions
@using Iqt.Base.Interfaces


@{
    ViewData["Title"] = "Training Courses";
    ViewData["Description"] = "A list of all the training courses for the administrator";
}

@section Styles
{
    <link href="~/css/plugins/iCheck/custom.css" rel="stylesheet">
    <link href="~/css/plugins/steps/jquery.steps.css" rel="stylesheet">
}
<div class="row animated fadeInRight">
    <div class="col-md-3">
        <div class="col-lg-3">
            @await Component.InvokeAsync("ModuleDetailsSection", new { moduleId = Model.Id })
        </div>
    </div>
    <div class="col-md-9">
        @await Component.InvokeAsync("CourseModuleSections", new{ moduleId = Model.Id})
    </div>
</div>

@section Scripts
{
    <script src="~/js/plugins/staps/jquery.steps.min.js"></script>
    <script src="~/js/plugins/validate/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                onStepChanging: function (event, currentIndex, newIndex) {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    // Forbid suppressing "Warning" step if the user is to young
                    if (newIndex === 3 && Number($("#age").val()) < 18) {
                        return false;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex) {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex) {
                    // Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 2 && Number($("#age").val()) >= 18) {
                        $(this).steps("next");
                    }

                    // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    if (currentIndex === 2 && priorIndex === 3) {
                        $(this).steps("previous");
                    }
                },
                onFinishing: function (event, currentIndex) {
                    var form = $(this);

                    // Disable validation on fields that are disabled.
                    // At this point it's recommended to do an overall check (mean ignoring only disabled fields)
                    form.validate().settings.ignore = ":disabled";

                    // Start validation; Prevent form submission if false
                    return form.valid();
                },
                onFinished: function (event, currentIndex) {
                    var form = $(this);

                    // Submit form input
                    form.submit();
                }
            }).validate({
                errorPlacement: function (error, element) {
                    element.before(error);
                },
                rules: {
                    confirm: {
                        equalTo: "#password"
                    }
                }
            });
        });
    </script>
}
