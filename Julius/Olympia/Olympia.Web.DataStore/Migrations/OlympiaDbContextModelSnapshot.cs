// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Olympia.Web.DataStore;

namespace Olympia.Web.DataStore.Migrations
{
    [DbContext(typeof(OlympiaDbContext))]
    partial class OlympiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blogging.Base.Entities.BlogPost", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AudioFileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("Reply")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialShares")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AudioFileId");

                    b.ToTable("BlogPost");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceRule")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EntityTask<Calendar.Base.Entities.RouteLocation>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("EntityTask<RouteLocation>");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EntityTask<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("EntityTask<Service>");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecurrenceRule")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EventDay", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventRegistrationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventRegistrationId");

                    b.ToTable("EventDay");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EventRegistration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("Attendees")
                        .HasColumnType("int");

                    b.Property<string>("ContactNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RecurringTask", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<double>("EstimatedCompletionTime")
                        .HasColumnType("float");

                    b.Property<string>("IconString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ListedCalendarItem")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("RecurringTask");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Route", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RouteLocation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteLocation");
                });

            modelBuilder.Entity("Customers.Base.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Employment.Base.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AppPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationAccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MarkedForDeletion")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInfoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Employment.Base.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Feedback.Base.Entities.Comment<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Comment<Service>Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FromDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Comment<Service>Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment<Service>");
                });

            modelBuilder.Entity("Feedback.Base.Entities.EntityFeeling", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Comment<Service>Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<int>("Feeling")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsFeedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Comment<Service>Id");

                    b.HasIndex("NewsFeedId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityFeeling");
                });

            modelBuilder.Entity("Feedback.Base.Entities.NewsFeed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("FromDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentFeedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentFeedId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsFeed");
                });

            modelBuilder.Entity("Feedback.Base.Entities.SupportTicket", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("CellNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentTicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTicketId");

                    b.ToTable("SupportTicket");
                });

            modelBuilder.Entity("Feedback.Base.Entities.Testimonial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Testimonial");
                });

            modelBuilder.Entity("Filing.Base.Entities.AudioFile<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("AudioFile<BlogPost>");
                });

            modelBuilder.Entity("Filing.Base.Entities.AudioFile<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("AudioFile<NewsFeed>");
                });

            modelBuilder.Entity("Filing.Base.Entities.File<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("File<NewsFeed>");
                });

            modelBuilder.Entity("Filing.Base.Entities.File<Feedback.Base.Entities.SupportTicket>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("File<SupportTicket>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<BlogPost>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Event>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Customers.Base.Entities.Customer>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Customer>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Employment.Base.Entities.Employee>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Employee>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<NewsFeed>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Feedback.Base.Entities.Testimonial>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Testimonial>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<BlogPost>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<Event>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Projects.Base.Entities.Project>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<Project>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Services.Base.Entities.Service>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<Service>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<Problem>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Category<Question>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<BlogPost>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<Event>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Projects.Base.Entities.Project>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<Project>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Services.Base.Entities.Service>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<Service>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<Problem>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Department<Question>>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<UserInfo>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Projects.Base.Entities.Project>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Project>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Service>");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ImageFile<Question>");
                });

            modelBuilder.Entity("Filing.Base.Entities.Video<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFrameString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Video<Event>");
                });

            modelBuilder.Entity("Filing.Base.Entities.Video<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFrameString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Video<NewsFeed>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<BlogPost>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<Event>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<Project>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<Service>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<Problem>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category<Question>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.ComboCategory<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("ComboItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboRecipyCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.HasKey("ComboItemId", "ComboRecipyCategoryId");

                    b.ToTable("ComboCategory<Service>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.ComboExclusions<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("ExclusionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboCategoryComboRecipyCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExclusionId", "ComboCategoryId");

                    b.HasIndex("ComboCategoryComboRecipyCategoryId");

                    b.ToTable("ComboExclusions<Service>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<BlogPost>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<Event>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Projects.Base.Entities.Project>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<Project>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<Service>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<Problem>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department<Question>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<BlogPost>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<Event>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Projects.Base.Entities.Project>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<Project>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<Service>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<Problem>");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntityId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategory<Question>");
                });

            modelBuilder.Entity("Identity.Base.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Identity.Base.Entities.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoodStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveNewsletters")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowContactInfo")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Address<Event>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.RecurringTask>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasFilter("[EntityId] IS NOT NULL");

                    b.ToTable("Address<RecurringTask>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.RouteLocation>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasFilter("[EntityId] IS NOT NULL");

                    b.ToTable("Address<RouteLocation>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Customers.Base.Entities.Customer>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Address<Customer>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Employment.Base.Entities.Employee>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Address<Employee>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Raduis")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Address<UserInfo>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Calendar.Base.Entities.Event>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactNumber<Event>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Customers.Base.Entities.Customer>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactNumber<Customer>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Employment.Base.Entities.Employee>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactNumber<Employee>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactNumber<UserInfo>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Customers.Base.Entities.Customer>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EmailAddress<Customer>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Employment.Base.Entities.Employee>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EmailAddress<Employee>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EmailAddress<UserInfo>");
                });

            modelBuilder.Entity("Iqt.Base.Entities.FormElement<Calendar.Base.Entities.RecurringTask>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("ElementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementType")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("FormElement<RecurringTask>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Projects.Base.Entities.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProjectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedProjectFolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Services.Base.Entities.IncludedService<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.HasKey("EntityId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("IncludedService<Service>");
                });

            modelBuilder.Entity("Services.Base.Entities.OptionalService<Services.Base.Entities.Service>", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.HasKey("EntityId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OptionalService<Service>");
                });

            modelBuilder.Entity("Services.Base.Entities.Service", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BillingFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Module")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Popular")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("PriceTableItem")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Answer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Cause", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("Cause");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.CorrectiveAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("CauseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.HasIndex("ProblemId");

                    b.ToTable("CorrectiveAction");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Problem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseCustomPage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int")
                        .HasColumnName("DisplayIndex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Blogging.Base.Entities.BlogPost", b =>
                {
                    b.HasOne("Filing.Base.Entities.AudioFile<Blogging.Base.Entities.BlogPost>", "AudioFile")
                        .WithMany()
                        .HasForeignKey("AudioFileId");

                    b.Navigation("AudioFile");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Appointment", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EntityTask<Calendar.Base.Entities.RouteLocation>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.RouteLocation", "Entity")
                        .WithMany("Tasks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendar.Base.Entities.RecurringTask", "Task")
                        .WithMany("LocationTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EntityTask<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("Tasks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendar.Base.Entities.RecurringTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Event", b =>
                {
                    b.HasOne("Iqt.Base.Entities.Address<Calendar.Base.Entities.Event>", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EventDay", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Event")
                        .WithMany("EventDays")
                        .HasForeignKey("EventId");

                    b.HasOne("Calendar.Base.Entities.EventRegistration", "EventRegistration")
                        .WithMany()
                        .HasForeignKey("EventRegistrationId");

                    b.Navigation("Event");

                    b.Navigation("EventRegistration");
                });

            modelBuilder.Entity("Calendar.Base.Entities.EventRegistration", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RecurringTask", b =>
                {
                    b.HasOne("Calendar.Base.Entities.RecurringTask", "ParentTask")
                        .WithMany("Tasks")
                        .HasForeignKey("ParentTaskId");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RouteLocation", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Route", "Route")
                        .WithMany("RouteLocations")
                        .HasForeignKey("RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Employment.Base.Entities.Employee", b =>
                {
                    b.OwnsOne("Iqt.Base.Entities.Names", "Names", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NickName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherNames")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Iqt.Base.Entities.SocialMedia", "SocialMedia", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Facebook")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Google")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Linkedin")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Twitter")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WebSiteAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Youtube")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Names");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("Employment.Base.Entities.Skill", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", "Employee")
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Feedback.Base.Entities.Comment<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.Comment<Services.Base.Entities.Service>", null)
                        .WithMany("Comments")
                        .HasForeignKey("Comment<Service>Id");

                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("Reviews")
                        .HasForeignKey("EntityId");

                    b.HasOne("Identity.Base.Entities.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feedback.Base.Entities.EntityFeeling", b =>
                {
                    b.HasOne("Feedback.Base.Entities.Comment<Services.Base.Entities.Service>", null)
                        .WithMany("FeedFeelings")
                        .HasForeignKey("Comment<Service>Id");

                    b.HasOne("Feedback.Base.Entities.NewsFeed", null)
                        .WithMany("FeedFeelings")
                        .HasForeignKey("NewsFeedId");

                    b.HasOne("Identity.Base.Entities.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feedback.Base.Entities.NewsFeed", b =>
                {
                    b.HasOne("Feedback.Base.Entities.NewsFeed", "ParentFeed")
                        .WithMany("Comments")
                        .HasForeignKey("ParentFeedId");

                    b.HasOne("Identity.Base.Entities.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentFeed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feedback.Base.Entities.SupportTicket", b =>
                {
                    b.HasOne("Feedback.Base.Entities.SupportTicket", "ParentTicket")
                        .WithMany("ChildTickets")
                        .HasForeignKey("ParentTicketId");

                    b.Navigation("ParentTicket");
                });

            modelBuilder.Entity("Filing.Base.Entities.AudioFile<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.HasOne("Blogging.Base.Entities.BlogPost", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.AudioFile<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.NewsFeed", "Entity")
                        .WithMany("AudioFiles")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.File<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.NewsFeed", "Entity")
                        .WithMany("Files")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.File<Feedback.Base.Entities.SupportTicket>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.SupportTicket", "Entity")
                        .WithMany("Files")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.HasOne("Blogging.Base.Entities.BlogPost", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Customers.Base.Entities.Customer>", b =>
                {
                    b.HasOne("Customers.Base.Entities.Customer", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Employment.Base.Entities.Employee>", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.NewsFeed", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Feedback.Base.Entities.Testimonial>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.Testimonial", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Projects.Base.Entities.Project>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Services.Base.Entities.Service>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Projects.Base.Entities.Project>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Projects.Base.Entities.Project>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Services.Base.Entities.Service>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Services.Base.Entities.Service>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Projects.Base.Entities.Project>", b =>
                {
                    b.HasOne("Projects.Base.Entities.Project", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.ImageFile<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.HasOne("Troubleshooting.Base.Entities.Question", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.Video<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Entity")
                        .WithMany("EventVideos")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Filing.Base.Entities.Video<Feedback.Base.Entities.NewsFeed>", b =>
                {
                    b.HasOne("Feedback.Base.Entities.NewsFeed", "Entity")
                        .WithMany("Videos")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Projects.Base.Entities.Project>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Services.Base.Entities.Service>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Department");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.ComboCategory<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Services.Base.Entities.Service", "ComboItem")
                        .WithMany("Combos")
                        .HasForeignKey("ComboItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", "ComboRecipyCategory")
                        .WithMany()
                        .HasForeignKey("ComboRecipyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComboItem");

                    b.Navigation("ComboRecipyCategory");
                });

            modelBuilder.Entity("Grouping.Base.Entities.ComboExclusions<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.ComboCategory<Services.Base.Entities.Service>", "ComboCategory")
                        .WithMany("Exclusions")
                        .HasForeignKey("ComboCategoryComboRecipyCategoryId")
                        .HasPrincipalKey("ComboRecipyCategoryId");

                    b.HasOne("Services.Base.Entities.Service", "Exclusion")
                        .WithMany("Exclusions")
                        .HasForeignKey("ExclusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComboCategory");

                    b.Navigation("Exclusion");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blogging.Base.Entities.BlogPost", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendar.Base.Entities.Event", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Projects.Base.Entities.Project>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projects.Base.Entities.Project", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troubleshooting.Base.Entities.Problem", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Grouping.Base.Entities.EntityCategory<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.HasOne("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", "Category")
                        .WithMany("EntityCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troubleshooting.Base.Entities.Question", "Entity")
                        .WithMany("Categories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Identity.Base.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "UserInfo")
                        .WithOne()
                        .HasForeignKey("Identity.Base.Entities.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Identity.Base.Entities.UserInfo", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", null)
                        .WithOne("UserInfo")
                        .HasForeignKey("Identity.Base.Entities.UserInfo", "EmployeeId");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<Event>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<Event>Id");

                            b1.ToTable("Address<Event>");

                            b1.WithOwner()
                                .HasForeignKey("Address<Event>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.RecurringTask>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.RecurringTask", "Entity")
                        .WithOne("Address")
                        .HasForeignKey("Iqt.Base.Entities.Address<Calendar.Base.Entities.RecurringTask>", "EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<RecurringTask>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<RecurringTask>Id");

                            b1.ToTable("Address<RecurringTask>");

                            b1.WithOwner()
                                .HasForeignKey("Address<RecurringTask>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Calendar.Base.Entities.RouteLocation>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.RouteLocation", "Entity")
                        .WithOne("Address")
                        .HasForeignKey("Iqt.Base.Entities.Address<Calendar.Base.Entities.RouteLocation>", "EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<RouteLocation>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<RouteLocation>Id");

                            b1.ToTable("Address<RouteLocation>");

                            b1.WithOwner()
                                .HasForeignKey("Address<RouteLocation>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Customers.Base.Entities.Customer>", b =>
                {
                    b.HasOne("Customers.Base.Entities.Customer", "Entity")
                        .WithMany("Addresses")
                        .HasForeignKey("EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<Customer>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<Customer>Id");

                            b1.ToTable("Address<Customer>");

                            b1.WithOwner()
                                .HasForeignKey("Address<Customer>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Employment.Base.Entities.Employee>", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", "Entity")
                        .WithMany("Addresses")
                        .HasForeignKey("EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<Employee>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<Employee>Id");

                            b1.ToTable("Address<Employee>");

                            b1.WithOwner()
                                .HasForeignKey("Address<Employee>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.Address<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "Entity")
                        .WithMany("Addresses")
                        .HasForeignKey("EntityId");

                    b.OwnsOne("Iqt.Base.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("Address<UserInfo>Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("Address<UserInfo>Id");

                            b1.ToTable("Address<UserInfo>");

                            b1.WithOwner()
                                .HasForeignKey("Address<UserInfo>Id");
                        });

                    b.Navigation("Entity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Calendar.Base.Entities.Event>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.Event", "Entity")
                        .WithMany("Contacts")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Customers.Base.Entities.Customer>", b =>
                {
                    b.HasOne("Customers.Base.Entities.Customer", "Entity")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Employment.Base.Entities.Employee>", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", "Entity")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.ContactNumber<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "Entity")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Customers.Base.Entities.Customer>", b =>
                {
                    b.HasOne("Customers.Base.Entities.Customer", "Entity")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Employment.Base.Entities.Employee>", b =>
                {
                    b.HasOne("Employment.Base.Entities.Employee", "Entity")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.EmailAddress<Identity.Base.Entities.UserInfo>", b =>
                {
                    b.HasOne("Identity.Base.Entities.UserInfo", "Entity")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Iqt.Base.Entities.FormElement<Calendar.Base.Entities.RecurringTask>", b =>
                {
                    b.HasOne("Calendar.Base.Entities.RecurringTask", "Entity")
                        .WithMany("FormElements")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.Base.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.Base.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Base.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.Base.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projects.Base.Entities.Project", b =>
                {
                    b.HasOne("Projects.Base.Entities.Project", "ParentProject")
                        .WithMany("LinkedProjects")
                        .HasForeignKey("ParentProjectId");

                    b.Navigation("ParentProject");
                });

            modelBuilder.Entity("Services.Base.Entities.IncludedService<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("IncludedServices")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Services.Base.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Services.Base.Entities.OptionalService<Services.Base.Entities.Service>", b =>
                {
                    b.HasOne("Services.Base.Entities.Service", "Entity")
                        .WithMany("OptionalServices")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Services.Base.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Answer", b =>
                {
                    b.HasOne("Troubleshooting.Base.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Cause", b =>
                {
                    b.HasOne("Troubleshooting.Base.Entities.Problem", "Problem")
                        .WithMany("Causes")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.CorrectiveAction", b =>
                {
                    b.HasOne("Troubleshooting.Base.Entities.Cause", "Cause")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("CauseId");

                    b.HasOne("Troubleshooting.Base.Entities.Problem", "Problem")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Cause");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Blogging.Base.Entities.BlogPost", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Event", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Contacts");

                    b.Navigation("EventDays");

                    b.Navigation("EventVideos");

                    b.Navigation("Images");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RecurringTask", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("FormElements");

                    b.Navigation("LocationTasks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Calendar.Base.Entities.Route", b =>
                {
                    b.Navigation("RouteLocations");
                });

            modelBuilder.Entity("Calendar.Base.Entities.RouteLocation", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Customers.Base.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactNumbers");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Employment.Base.Entities.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactNumbers");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Images");

                    b.Navigation("Skills");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Feedback.Base.Entities.Comment<Services.Base.Entities.Service>", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FeedFeelings");
                });

            modelBuilder.Entity("Feedback.Base.Entities.NewsFeed", b =>
                {
                    b.Navigation("AudioFiles");

                    b.Navigation("Comments");

                    b.Navigation("FeedFeelings");

                    b.Navigation("Files");

                    b.Navigation("Images");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Feedback.Base.Entities.SupportTicket", b =>
                {
                    b.Navigation("ChildTickets");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Feedback.Base.Entities.Testimonial", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Calendar.Base.Entities.Event>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Projects.Base.Entities.Project>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Services.Base.Entities.Service>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Category<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Navigation("EntityCollection");

                    b.Navigation("Images");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Grouping.Base.Entities.ComboCategory<Services.Base.Entities.Service>", b =>
                {
                    b.Navigation("Exclusions");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Blogging.Base.Entities.BlogPost>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Calendar.Base.Entities.Event>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Projects.Base.Entities.Project>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Services.Base.Entities.Service>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Problem>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Grouping.Base.Entities.Department<Troubleshooting.Base.Entities.Question>", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Identity.Base.Entities.UserInfo", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactNumbers");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Projects.Base.Entities.Project", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");

                    b.Navigation("LinkedProjects");
                });

            modelBuilder.Entity("Services.Base.Entities.Service", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Combos");

                    b.Navigation("Exclusions");

                    b.Navigation("Images");

                    b.Navigation("IncludedServices");

                    b.Navigation("OptionalServices");

                    b.Navigation("Reviews");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Cause", b =>
                {
                    b.Navigation("CorrectiveActions");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Problem", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Causes");

                    b.Navigation("CorrectiveActions");
                });

            modelBuilder.Entity("Troubleshooting.Base.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Categories");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
